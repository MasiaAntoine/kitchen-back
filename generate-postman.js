import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import fetch from "node-fetch"; // Vous devrez installer ce package
import dotenv from "dotenv";

dotenv.config();

// Obtenir le chemin du r√©pertoire actuel (√©quivalent √† __dirname en CommonJS)
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Chemin vers le fichier de collection Postman g√©n√©r√© par Scribe
const collectionPath = path.join(
    __dirname,
    "storage/app/private/scribe/collection.json"
);

// Configuration Postman - √Ä d√©finir dans vos variables d'environnement ou dans un fichier .env
const POSTMAN_API_KEY = process.env.POSTMAN_API_KEY;
const POSTMAN_COLLECTION_ID = process.env.POSTMAN_COLLECTION_ID; // ID de votre collection existante

console.log(
    "üîß Modification de la collection Postman pour ajouter Basic Auth et am√©liorer les titres..."
);

try {
    // Lire le fichier JSON
    const collection = JSON.parse(fs.readFileSync(collectionPath, "utf8"));

    // S'assurer que les variables d'authentification existent
    if (!collection.variable) {
        collection.variable = [];
    }

    // V√©rifier si les variables api_username et api_password existent d√©j√†
    const hasUsername = collection.variable.some(
        (v) => v.key === "api_username"
    );
    const hasPassword = collection.variable.some(
        (v) => v.key === "api_password"
    );

    // Ajouter les variables si elles n'existent pas
    if (!hasUsername) {
        collection.variable.push({
            id: "api_username",
            key: "api_username",
            type: "string",
            value: "",
        });
    }

    if (!hasPassword) {
        collection.variable.push({
            id: "api_password",
            key: "api_password",
            type: "string",
            value: "",
        });
    }

    // Configurer l'authentification globale au niveau de la collection
    collection.auth = {
        type: "basic",
        basic: [
            {
                key: "username",
                value: "{{api_username}}",
                type: "string",
            },
            {
                key: "password",
                value: "{{api_password}}",
                type: "string",
            },
        ],
    };

    // Fonction pour supprimer les dossiers "tempo"
    function removeTempoFolders(items) {
        if (!items || !Array.isArray(items)) return items;

        // Filtrer pour supprimer les √©l√©ments nomm√©s "tempo"
        const filteredItems = items.filter((item) => item.name !== "tempo");

        // Traiter r√©cursivement les sous-dossiers
        for (const item of filteredItems) {
            if (item.item && Array.isArray(item.item)) {
                item.item = removeTempoFolders(item.item);
            }
        }

        return filteredItems;
    }

    // Fonction pour extraire les noms d'exemples des corps de r√©ponse
    function extractResponseNames(items) {
        if (!items) return;

        for (const item of items) {
            if (item.response && Array.isArray(item.response)) {
                for (const response of item.response) {
                    // Cherche un format comme "success {...}" ou "error {...}"
                    const nameMatch = response.body.match(/^(\w+)\s+({.*})/s);
                    if (nameMatch && nameMatch.length > 2) {
                        // Extrait le nom et le corps JSON
                        const name = nameMatch[1];
                        const body = nameMatch[2];

                        // Met √† jour la r√©ponse avec le nom extrait et nettoie le corps
                        response.name = name;
                        response.body = body;
                    }
                }
            }

            // Traiter les sous-√©l√©ments r√©cursivement
            if (item.item && Array.isArray(item.item)) {
                extractResponseNames(item.item);
            }
        }
    }

    // Fonction r√©cursive pour appliquer l'authentification Basic √† chaque requ√™te et am√©liorer les titres
    // Fonction r√©cursive pour appliquer l'authentification Basic √† chaque requ√™te et am√©liorer les titres
    function applyBasicAuthAndImproveNames(items) {
        if (!items) return;

        for (const item of items) {
            if (item.request) {
                // V√©rifier si cette requ√™te est la route de login (pour l'exclure de l'auth)
                const isLoginRoute =
                    item.request.url &&
                    item.request.url.path &&
                    item.request.url.path.includes("login") &&
                    item.request.method === "POST";

                // Appliquer l'authentification Basic explicitement √† cette requ√™te, sauf pour login
                if (!isLoginRoute) {
                    item.request.auth = {
                        type: "basic",
                        basic: [
                            {
                                key: "username",
                                value: "{{api_username}}",
                                type: "string",
                            },
                            {
                                key: "password",
                                value: "{{api_password}}",
                                type: "string",
                            },
                        ],
                    };
                } else {
                    // Pour la route de login, on s'assure qu'il n'y a pas d'authentification
                    console.log(
                        "üîì Route /login d√©tect√©e, pas d'authentification Basic appliqu√©e"
                    );
                    item.request.auth = null;
                }
            }

            // Traiter les sous-dossiers r√©cursivement
            if (item.item && Array.isArray(item.item)) {
                applyBasicAuthAndImproveNames(item.item);
            }
        }
    }

    // Supprimer les dossiers "tempo"
    if (collection.item && Array.isArray(collection.item)) {
        collection.item = removeTempoFolders(collection.item);
    }

    // Appliquer l'authentification et am√©liorer les titres
    if (collection.item && Array.isArray(collection.item)) {
        applyBasicAuthAndImproveNames(collection.item);
    }

    // Extraire les noms des exemples de r√©ponse
    if (collection.item && Array.isArray(collection.item)) {
        extractResponseNames(collection.item);
    }

    // Sauvegarder les modifications dans le fichier d'origine
    fs.writeFileSync(collectionPath, JSON.stringify(collection, null, 2));

    // D√©finir le chemin du fichier de destination √† la racine du projet
    const destPath = path.join(__dirname, "postman_generate.json");

    // Copier le fichier modifi√© vers la racine du projet
    fs.copyFileSync(collectionPath, destPath);

    console.log("‚úÖ Collection Postman mise √† jour avec succ√®s !");
    console.log(`üìç Fichier original mis √† jour : ${collectionPath}`);
    console.log(`üìç Collection copi√©e vers la racine : ${destPath}`);

    // Si l'API KEY Postman est d√©finie, envoyer la collection √† Postman
    if (POSTMAN_API_KEY && POSTMAN_COLLECTION_ID) {
        console.log("üöÄ Envoi de la collection √† Postman...");

        // Fonction pour envoyer la collection √† Postman
        async function uploadToPostman() {
            try {
                console.log(
                    `üîç Envoi vers ${
                        POSTMAN_COLLECTION_ID
                            ? "la collection existante"
                            : "une nouvelle collection"
                    }...`
                );

                let url = "https://api.getpostman.com/collections";
                let method = "POST";

                // Si un ID de collection est fourni, mettre √† jour la collection existante
                if (POSTMAN_COLLECTION_ID) {
                    url = `https://api.getpostman.com/collections/${POSTMAN_COLLECTION_ID}`;
                    method = "PUT";
                }

                console.log(
                    `üì§ Envoi vers l'URL: ${url} avec la m√©thode: ${method}`
                );

                const response = await fetch(url, {
                    method: method,
                    headers: {
                        "X-API-Key": POSTMAN_API_KEY,
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        collection: collection,
                    }),
                });

                console.log(
                    `üìä Statut de la r√©ponse: ${response.status} ${response.statusText}`
                );

                const data = await response.json();

                if (response.ok) {
                    console.log(
                        "‚úÖ Collection " +
                            (method === "PUT" ? "mise √† jour" : "cr√©√©e") +
                            " avec succ√®s dans Postman!"
                    );
                    console.log(
                        `üìç ID de la collection: ${data.collection.uid}`
                    );

                    // Si nous venons de cr√©er une collection, afficher l'ID pour une utilisation future
                    if (method === "POST") {
                        console.log(
                            "‚ö†Ô∏è Veuillez mettre √† jour votre variable POSTMAN_COLLECTION_ID avec cet ID pour les prochaines ex√©cutions"
                        );
                    }

                    // Supprimer le fichier JSON g√©n√©r√© apr√®s un envoi r√©ussi
                    try {
                        fs.unlinkSync(destPath);
                        console.log(
                            `üßπ Fichier temporaire supprim√© : ${destPath}`
                        );
                    } catch (deleteError) {
                        console.error(
                            `‚ö†Ô∏è Impossible de supprimer le fichier temporaire : ${deleteError.message}`
                        );
                    }
                } else {
                    console.error(
                        `‚ùå Erreur lors de ${
                            method === "PUT" ? "la mise √† jour" : "la cr√©ation"
                        } de la collection dans Postman:`,
                        data.error
                    );
                }
            } catch (error) {
                console.error(
                    "‚ùå Erreur lors de l'envoi √† l'API Postman:",
                    error.message
                );
                console.error("‚ùå Erreur d√©taill√©e:", error);
            }
        }

        // Ex√©cuter la fonction d'upload
        uploadToPostman().catch((err) => {
            console.error("‚ùå Erreur inattendue:", err);
        });
    }

    console.log(
        "‚úÖ Les noms des exemples de r√©ponse ont √©t√© extraits correctement."
    );
} catch (error) {
    console.error(
        "‚ùå Erreur lors de la modification de la collection :",
        error.message
    );
    process.exit(1);
}
